#!/bin/sh

echo This script will ask you several questions related to the configuration
echo of your system. To choose the default answer \(the one printed between
echo the brackets\), simply press Enter.
echo
echo "Checking echo to see how to suppress newlines..."

if (echo "hi\c"; echo " ") | grep c >/dev/null 2>&1 ; then
  echo "...using -n."; n=-n; c=
else
  cat <<EOM
...using \c
EOM
  n=; c='\c'
fi
echo $n ..."The star should be here-->$c"; echo '*'

if test -r ./config.in; then . ./config.in; fi

# TODO : gestion du echo -n...

# On determine OS et on met en place les flags bizarres.
syst=`uname -a | awk '{print $1$3}'`

case $syst in 
    CYGWIN*)
      ostype="cygwin"
      defC="gcc"
      make="make"
      ldlibs="-lm"
      ;;
    SunOS5*)
        ostype=solaris	
	defC=/usr/local/bin/gcc
	machtype=sparc
	make=/usr/ccs/bin/make	
	ldlibs="-lm"
	;;
    Linux*)
	fpucw=`grep __setfpucw /usr/include/fpu_control.h`
	if test -z "$fpucw"; then special="-DLIBC211"; fi;  # for __setfpucw
        ostype=linux
	defC=/usr/bin/gcc
	make=/usr/bin/make
	machtype=`uname -a | awk '{print $11}'`
	if [ "$machtype" = "alpha" ]; 
	then special="-mfp-rounding-mode=d -mieee-with-inexact";
	fi; 
	ldlibs="-lm"
	;;
    OSF*)
        special="-D__STDC__ $special -mfp-rounding-mode=d -mieee-with-inexact -ffloat-store";
        ostype=alpha
	defC=/usr/local/bin/gcc
	make=/usr/local/gnu/bin/make # pour $LDLIBS des tests
	machtype=dec
	ldlibs="-lm"
	;;
    SunOS4*)
        ostype=sunos
	machtype=sparc
	defC=/usr/local/gnu/bin/gcc 
	make=/usr/local/gnu/bin/make
	ldlibs="-lm"	
	;;
    IRIX64*)
	ostype=IRIX64
	machtype=sgi
	defC=/usr/local/gnu/bin/gcc
	make=/usr/local/gnu/bin/make
	ldlibs="-lm"
	;;
    HP-UX*)
	ostype=HPUX
	machtype=HP
	defC=/usr/local/gnu/bin/gcc
	make=/usr/local/gnu/bin/make
	special="-Dhpux"
	ldpath="-L/lib/pa1.1"
	ldlibs="-lM"	
	;;	
    AIX*)
	ostype=AIX
	machtype=IBM
	defC=/usr/local/bin/gcc
	make=/usr/local/bin/make
	ldlibs="-lm"
	;;
    *)
	ostype=unknown
	make=/usr/local/gnu/bin/make
	machtype=default;;	
	# we should try to look for gcc there 
esac

echo You seem to be using a $machtype running $ostype.
echo

if [ "$ostype" = "IRIX64" ]; 
	then
	echo On this architecture you need to decide whether your program
	echo will be compiled as a 32-bit or a 64-bit executable. 
	echo
		while :; do
		echo $n "32/64 bits mode [32] ? $c"
		read ans
		case "$ans" in
		   '' | 32*)
		   special="-mabi=n32 $special"
		   break
		   ;;
		   64*) 
		   special="-mabi=64 $special"
		   break;;
		   *) 
		   echo Invalid choice
		   ;;
		esac
		done; 
fi

while :; do
    echo $n "Which C compiler are you going to use [$defC] ? $c"
    read ans
    case "$ans" in 
	'')
	ans="$defC"
	break
	;;
	*)
	if test -x "$ans"; then break; fi
	echo $n "*** $ans: file does not exist or execution permission denied"
    esac
done
defC=$ans

echo Using compiler $defC
echo
echo I now need to know where to find the GMP distribution. I do not actually
echo need the full distribution, but only the following include files : 
echo gmp.h, gmp-impl.h, gmp-mparam.h, longlong.h, stack-alloc.h

while :; do
    echo $n "Where should I look for these files [$inc] ? $c"
    read ans
    case "$ans" in 
	'')
	ans=$inc
	;;
	*) 
	;;
    esac
    if test -r "$ans"/gmp.h -a -r "$ans"/gmp-impl.h -a -r "$ans"/gmp-mparam.h -a -r "$ans"/longlong.h -a -r "$ans"/stack-alloc.h; 
    then incflags="-I$ans" 
	 break; 
    fi; 
    # ad hoc installation 
    
    if test -r "$ans"/gmp.h -a \
	    -r "$ans"/gmp-impl.h -a \
	    -r "$ans"/mpn/gmp-mparam.h -a \
	    -r "$ans"/longlong.h -a \
	    -r stack-alloc.h; 
    then 
    incflags="-I$ans -I$ans/mpn " 
    break; 
    fi; # gmp distrib 

    echo I could not find some of the files at that place, or could not read
    echo some of them. Please try again.
    echo 
done
inc=$ans

echo
echo If you wish to compile a program with the mpfr library, you will need
echo the gmp library. In particular, in order to compile the tests, you will
echo need it. Could you tell me where to find it ? 
echo $n "(You can lie, I won't check) path for the libgmp.a file [$lib] ? $c"
read ans

if test -z "$ans"; then ans=$lib; fi; 
if test -d "$ans" -a -r "$ans/libgmp.a"; then lib="$ans/libgmp.a"; fi; 
olib=$ans


echo
echo Unless you know what you are doing, you should not answer anything
echo to the following question.
echo $n "Flags for floating point rounding modes [$contrspecial] ? $c"
read ans
case "$ans" in 
	'')
	ans="$contrspecial"
	;;
	*) 
	;;
esac
contrspecial=$ans

if test -z "$cflags"; then cflags="-ansi -Wall -pedantic -g -O2"; fi; 

echo
echo $n "What supplementary (optimization/debugging) flags are you willing to use [$cflags] ? $c"
read ans
case "$ans" in 
	'')
	ans="$cflags"
	;;
	*) 
	;;
esac
cflags=$ans

echo
echo Now dumping the Makefile. 

cat > config.in<<EOF
inc=$inc
lib=$olib
cflags="$cflags"
contrspecial="$contrspecial"
EOF

cat > Makefile <<EOF
#
# Makefile automatically generated by Configure. Do not edit !!
#
CC=$defC
CFLAGS=\$(TESTFLAGS) $special $incflags $cflags $contrspecial -D$ostype
OBJS=add.o div_2exp.o neg.o set_dfl_prec.o set_str_raw.o agm.o get_str.o print_raw.o set_dfl_rnd.o sqrt.o clear.o init.o rnd_mode.o set_f.o sub.o cmp.o mul.o  round.o set_prec.o cmp_ui.o mul_2exp.o set.o set_si.o div.o mul_ui.o set_d.o pow.o out_str.o pi.o set_z.o add_ulp.o log2.o random.o log.o exp.o div_ui.o zeta.o karasqrt.o print_rnd_mode.o set_q.o random2.o eq.o dump.o set_prc_raw.o urandomb.o ceil.o floor.o trunc.o add_ui.o sqrt_ui.o ui_div.o ui_sub.o reldiff.o sub_ui.o set_str.o inp_str.o
VERSION=0.0

dft: libmpfr.a

all: libmpfr.a tests

clean:
	-rm libmpfr.a \$(OBJS) mpfr.dvi *~ mpfr.aux mpfr.cp mpfr.cps mpfr.fn mpfr.fns mpfr.ky mpfr.log mpfr.pg mpfr.toc mpfr.tp mpfr.vr mpfr.vrs

libmpfr.a: \$(OBJS)
	ar cr libmpfr.a \$(OBJS)
	ranlib libmpfr.a    

tests: mpfr.h libmpfr.a
	-cd tests; \$(MAKE) "TESTFLAGS=\$(TESTFLAGS)" all

doc: mpfr.texi
	texi2dvi mpfr.texi

dist:
	mkdir mpfr-\$(VERSION)
	tar cf mpfr.tar *.c COPYING.LIB Configure INSTALL mpfr.texi mpfr.h mpfr-impl.h tests/*.c
	cd mpfr-\$(VERSION); mv ../mpfr.tar .; tar xf mpfr.tar; rm mpfr.tar
	tar cf mpfr-\$(VERSION).tar mpfr-\$(VERSION)
	gzip mpfr-\$(VERSION).tar
	rm -r mpfr-\$(VERSION)

add.o: mpfr.h
div_2exp.o: mpfr.h
neg.o: mpfr.h
set_dfl_prec.o: mpfr.h
set_str_raw.o: mpfr.h
agm.o: mpfr.h
get_str.o: mpfr.h
print_raw.o: mpfr.h
set_dfl_rnd.o: mpfr.h
sqrt.o: mpfr.h
clear.o: mpfr.h
init.o: mpfr.h
rnd_mode.o: mpfr.h
set_f.o: mpfr.h
sub.o: mpfr.h
cmp.o: mpfr.h
mul.o: mpfr.h
random.o: mpfr.h
round.o: mpfr.h
set_prec.o: mpfr.h
cmp_ui.o: mpfr.h
mul_2exp.o: mpfr.h
set.o: mpfr.h
set_si.o: mpfr.h
div.o: mpfr.h
mul_ui.o: mpfr.h
set_d.o: mpfr.h
pow.o: mpfr.h
out_str.o: mpfr.h
pi.o: mpfr.h
set_z.o: mpfr.h
add_ulp.o: mpfr.h
log2.o: mpfr.h
log.o: mpfr.h
exp.o: mpfr.h
div_ui.o: mpfr.h
zeta.o: mpfr.h
random2.o: mpfr.h
eq.o: mpfr.h
dump.o: mpfr.h
set_prc_raw.o: mpfr.h
urandomb.o: mpfr.h
sub_ui.o: mpfr.h
ceil.o: mpfr.h
	\$(CC) \$(CFLAGS) -DMPFR_CEIL -c trunc.c -o ceil.o
floor.o: mpfr.h
	\$(CC) \$(CFLAGS) -DMPFR_FLOOR -c trunc.c -o floor.o
trunc.o: mpfr.h
	\$(CC) \$(CFLAGS) -DMPFR_TRUNC -c trunc.c
EOF
cat > tests/Makefile <<EOF
CC=$defC
CFLAGS=$special $incflags -I.. $cflags $ldpath -D$ostype
LDLIBS=$ldflags ../libmpfr.a $lib $ldlibs
TESTS=tadd tcmp2 tget_str tmul_ui tset_f tsqrt tagm tcmp_ui tmul tround tset_si tcmp tdiv tmul_2exp tset_d tset_str tpi tset_z tlog2 tcan_round tlog texp tdiv_ui tzeta tout_str tset_q tadd_ui tsqrt_ui tui_div tui_sub tabs teq trandom ttrunc

tests all: \$(TESTS)
	for i in \$(TESTS); do \
	echo Testing \$\$i; \
	./\$\$i; \
	done

clean:
	-rm \$(TESTS) *~

t%: t%.c ../libmpfr.a 
	\$(CC) \$(CFLAGS) \$(TESTFLAGS) -o \$@ \$@.c \$(LDLIBS)
EOF




